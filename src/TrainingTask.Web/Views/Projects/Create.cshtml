@using TrainingTask.Web.Controllers
@model TrainingTask.Web.Model.ProjectViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<hr/>
<div class="row">
    <div class="col-md-4">
        <form asp-action="@ProjectsController.SaveAction">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Id" class="control-label"></label>
                <input asp-for="Id" readonly class="form-control"/>
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control"/>
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ShortName" class="control-label"></label>
                <input asp-for="ShortName" class="form-control"/>
                <span asp-validation-for="ShortName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control"/>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            @if (Model != null)
            {
                <partial name="../Tasks/Index" model="Model.Tasks"/>
            }
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary"/>
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="@ProjectsController.IndexAction">Back to List</a>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}